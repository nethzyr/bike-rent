// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_URL")
    referentialIntegrity = "prisma"
}

model Bike {
    id        Int     @id @default(autoincrement())
    model     String
    color     String
    location  String
    available Boolean

    ratings Rating[]
    rentals Rental[]
}

model Rating {
    id     Int     @id @default(autoincrement())
    value  Int
    rental Rental?

    bikeId Int
    bike   Bike @relation(fields: [bikeId], references: [id])
}

model Rental {
    id        Int      @id @default(autoincrement())
    startDate DateTime
    endDate   DateTime

    ratingId Int?    @unique
    rating   Rating? @relation(fields: [ratingId], references: [id], onDelete: Cascade)
    bikeId   Int
    bike     Bike    @relation(fields: [bikeId], references: [id])
    userId   Int
    user     User    @relation(fields: [userId], references: [id])
}

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            Int       @id @default(autoincrement())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(USER)

    Rentals Rental[]
}

enum Role {
    USER
    MANAGER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
